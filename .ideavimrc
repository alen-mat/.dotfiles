source ~/.config/vim/vimrc
" To get a list of Actions run `:actionlist `
" let mapleader = ','
" let mapleader = " "
let mapleader = "\<SPACE>"

set ideajoin
set sneak

Plug 'preservim/nerdtree'
Plug 'tpope/vim-surround'
Plug 'easymotion/vim-easymotion'
Plug 'tpope/vim-commentary'
Plug 'tommcdo/vim-exchange'
Plug 'terryma/vim-multiple-cursors'
Plug 'machakann/vim-highlightedyank'
Plug 'vim-scripts/argtextobj.vim'

nmap <Leader>ir <Action>(IdeaVim.ReloadVimRc.reload)

" clear the search buffer when hitting return
nnoremap <Leader>/ :nohlsearch<cr>

nnoremap <expr> j (v:count <= 1 ? 'j' : "m'" . v:count . 'j')
nnoremap <expr> k (v:count <= 1 ? 'k' : "m'" . v:count . 'k')
xnoremap <expr> j (v:count <= 1 ? 'j' : "m'" . v:count . 'j')
xnoremap <expr> k (v:count <= 1 ? 'k' : "m'" . v:count . 'k')

" To copy text to the end-of-line, press Y.
" This mapping sets up Y to be consistent with
" the C and D operators, which act from the cursor
" to the end of the line. The default behavior of Y
" is to yank the whole line.
"nnoremap Y y$


" Greatest remap EVER!! 
" Let me explain, this remap while in visiual mode
" will delete what is currently highlighted and replace it 
" with what is in the register BUT it will YANK (delete) it 
" to a VOID register. Meaning I still have what I originally had
" when I pasted. I don't loose the previous thing I YANKED!
vnoremap <leader>p "_dP

" nmap <leader>fs :action FileStructurePopup<CR>

" Some Action commands to memic my native vim
" For a list of :action try :actionlist
" ===========================================
" Hide open panels
nmap <Leader>w :action HideAllWindows<CR>

" Open Terminal
nmap <Leader>t :action ActivateTerminalToolWindow<CR>

" Open recent project dialog box
nmap <Leader><Leader>m :action ManageRecentProjects<CR>

" Mapping to mimic BufferExplorer
" nmap <Leader>be :action Switcher<CR>
nmap <Leader>sr :action RecentFiles<CR>
nmap <Leader>sf :action GotoFile<CR>
"nmap <Leader>fg :action SearchEverywhere<CR>
nmap <Leader>sg :action FindInPath<CR>
nnoremap gO       :action FileStructurePopup<CR>
nnoremap -        :action SelectInProjectView<CR>

" Toggle code minimap
nmap <Leader>m :action CodeGlance.toggle<CR>

" Nerdtree
" nmap <Leader>nt :action ActivateProjectToolWindow<CR>
nmap <Leader>nt :NERDTreeToggle<CR>
let g:NERDTreeMapActivateNode="l"
let g:NERDTreeMapCloseDir="h"
let NERDTreeQuitOnOpen=1
let NERDTreeWinSize=35

" Toggle ToggleDistractionFreeMode
nmap - :action ToggleDistractionFreeMode<CR>

" Quick Quite
nnoremap <leader>q :q <CR>

"Coding Formating
" ===============
nnoremap <leader>cf :action ReformatCode<CR>

" Git
nmap <Leader>gb :action Annotate<CR>
nmap <Leader>gl :action Git.Log<CR>
nmap <Leader>gs :action Git.Branches<CR>
nmap <Leader>gm :action Git.Menu<CR>

" View my customize Quicklist
nmap <Leader><leader>l :action QuickList.MyList<CR>

" AceJump Plugin - Jump to Character
nmap <Leader><Leader>w :action AceAction<CR>

" Commenting
nmap gcc :action CommentByBlockComment<CR>
nmap gc :action CommentByLineComment<CR>

" Refactoring
nmap <Leader>rt :action Refactorings.QuickListPopupAction<CR>
"nmap csw' :action Macro.surround_with_single_quote<CR>

"Code Diagnostics / lsp
nnoremap [d :action GotoPreviousError<CR>
nnoremap ]d :action GotoNextError<CR>
nmap lu <Action>(ShowUsages)
nmap lt <Action>(TypeHierarchy)
nmap lU <Action>(FindUsages)
"CallHierarchy
nnoremap lc <Action>(CallHierarchyPopupMenu)
nnoremap lb <Action>(CallHierarchy.BaseOnThisType) 
nmap gb <Action>(Back)
nmap ld <Action>(GotoTypeDeclaration)
nmap gf <Action>(Forward)
nmap lD <Action>(QuickJavaDoc)
nmap li <Action>(QuickImplementations)
nnoremap lI       :action GotoImplementation<CR>
nmap ldd <Action>(ShowErrorDescription)

" run/debug
nnoremap <Space>rc :action RunConfiguration<CR>
noremap <Space>rr :action Run<CR>
noremap <Space>rn :action RunClass<CR>
nnoremap <Leader>cr :action ChooseRunConfiguration<CR>
noremap <Space>dd :action Debug<CR>
noremap <Space>dn :action DebugClass<CR>
nnoremap <Leader>cd :action ChooseDebugConfiguration<CR>
noremap <Space>cc :action Coverage<CR>
noremap <Space>cn :action RunCoverage<CR>
noremap <Space>sp   :action Stop<CR>
"nnoremap <Leader>rr :action Rerun<CR>

" debugging
nnoremap <C-q> :action EvaluateExpression<CR>
nnoremap <Delete> :action ToggleLineBreakpoint<CR>
nnoremap <Left> :action StepOut<CR>
nnoremap <Right> :action StepOver<CR>
nnoremap <A-Right> :action Resume<CR>
nnoremap <F5> :action Resume<CR>
nnoremap <Up> :action Debugger.FramePanelPopup<CR>
nnoremap <Down> :action StepInto<CR>
nnoremap <A-Down> :action SmartStepInto<CR>
nnoremap <A-d> :action JavaDebuggerActions<CR>
nmap <C>] :action XDebugger.JumpToSource

" Harpoon keybindings
" Setting harpoons
nnoremap <leader><leader>1 :action SetHarpoon1<CR>
nnoremap <leader><leader>2 :action SetHarpoon2<CR>
nnoremap <leader><leader>3 :action SetHarpoon3<CR>
nnoremap <leader><leader>4 :action SetHarpoon4<CR>
nnoremap <leader><leader>5 :action SetHarpoon5<CR>
nnoremap <leader>u :action ShowHarpoon<CR>

" Navigationing harpoons
noremap <leader>1 :action GotoHarpoon1<CR>
noremap <leader>2 :action GotoHarpoon2<CR>
noremap <leader>3 :action GotoHarpoon3<CR>
noremap <leader>4 :action GotoHarpoon4<CR>
noremap <leader>5 :action GotoHarpoon5<CR>
"END Harpoon keybindings

" action ShowIntentionActions
" nmap gh <Action>(ShowIntentionActions)
nmap gh <Action>(ShowHoverInfo)

set ideastrictmode
