let mapleader=" "

let &t_ut=''

if has('filetype')
	set autoindent
	filetype indent plugin on
endif

"dein Plugin manager-----------------------------
if &compatible
	set nocompatible               " Be iMproved
endif

"End dein ---------------------------------------

if has('syntax')
	syntax on
endif

if has('mouse')
	set mouse=a
endif

if has('clipboard')
	if has("win32")
		noremap <Leader>y "*y
		noremap <Leader>p "*p
	else
		if has("unix")
			let s:uname = system("uname")
			if s:uname == "Darwin\n"

			else
				noremap <Leader>Y "+y
				noremap <Leader>P "+p
			endif
		endif
	endif
endif

" Display all matching files when tab-complete
set wildmenu
" - find by partial match
" - * fuzzy search
" - :b autocomplete open buffers

set showmode
set showcmd
set hlsearch
set ignorecase smartcase
set smartcase
set nostartofline
set ruler
set laststatus=2
set confirm
set visualbell
set cmdheight=2
set tabstop=2
set incsearch
set number
set relativenumber
set scrolloff=5
set history=1000
set noerrorbells

"set autochdir

set guicursor+=n-v-c:blinkon0

autocmd InsertEnter,InsertLeave * set cul!

"FINDING FILES
"Search through sub folders
"Tab-completion for file related tasks
set path+=**

" TAG JUMPING
" - requires ctags
" - ^] tag under cursor
" - g^] ambiguous tag
" - ^t back to tag stack
" - Not visual  
command! MakeTags !ctags -R .

"AUTOCOMPLETE
" - ^n for suggestion ^p to traverse suggestion
" - ^x^n only from current file
" - ^x^f for filenames
" - ^x^] for tags only
" - ^n autocomplete from default completion
"

au BufNewFile,BufRead *.py set tabstop=4 softtabstop=4 shiftwidth=4 expandtab smarttab autoindent 

"FILE BOWSING
" - 
"
"

let g:currentmode={
    \ 'n'  : 'Normal',
    \ 'no' : 'Normal·Operator Pending',
    \ 'v'  : 'Visual',
    \ 'V'  : 'V·Line',
    \ '^V' : 'V·Block',
    \ 's'  : 'Select',
    \ 'S'  : 'S·Line',
    \ '^S' : 'S·Block',
    \ 'i'  : 'Insert',
    \ 'R'  : 'Replace',
    \ 'Rv' : 'V·Replace',
    \ 'c'  : 'Command',
    \ 'cv' : 'Vim Ex',
    \ 'ce' : 'Ex',
    \ 'r'  : 'Prompt',
    \ 'rm' : 'More',
    \ 'r?' : 'Confirm',
    \ '!'  : 'Shell',
    \ 't'  : 'Terminal'
    \}

set statusline-[%(toupper(g:currentmode[mode()])]]
set statusline:=\ \
set statusline+=%r
set statusline+=%f
set statusline+=%m
set statusline+=%=
set statusline+=%y
set statusline+=%l
set statusline+=/
set statusline+=%L


"SNIPPETS
" noremap ,html : -lread <__FILE__><CR>3jwf>a
" - <CR> carriage return code of vim
"
command FileSyn execute "vnew | r !file_sync # "
command FormatJSON execute "%!json_pp"
command FormatXML execute "%!python -c 'import sys; import xml.dom.minidom; s=sys.stdin.read(); print(xml.dom.minidom.parseString(s).toprettyxml())'"

nmap <Leader>\ :vsplit<CR>
nmap <Leader>- :split<CR>

nnoremap <Leader><Leader>r :%s//g<Left><Left>
xnoremap <Leader><Leader>r :s//g<Left><Left>

vnoremap J :m '>+1<CR>
" xnoremap K :m '<-2<CR>
vnoremap K :m '<-2<CR>

" Put search results in the middle of the screen
nnoremap n nzz
nnoremap N Nzz

" Optional (so <CR> cancels prefix, selection, operator).
nnoremap <CR> <Esc>
vnoremap <CR> <Esc>gV
onoremap <CR> <Esc>


noremap <Up> <Nop>
noremap <Down> <Nop>
noremap <Left> <Nop>
noremap <Right> <Nop>
inoremap <esc> <nop>
inoremap jk <esc>

tnoremap <Leader><Esc> <C-\><c-n>
tnoremap <A-k> <C-\><C-n>:wincnd k<CR>
tnoremap <A-j> <C-\><C-n>:wincmd j<CR>
tnoremap <A-h> <C-\><C-n>:wincmd hecR>
tnoremap <A-1> <C-\><C-n>:wincmd l<CR>
nmap <silent> <A-k> :wincmd k<CR>
nmap <silent> <A-j> :wincmd j<CR>
nmap <silent> <A-h> :wincmd h<CR>
nmap <silent> <A-l> :wincmd l<CR>
nmap <silent> <A-C-j> :resize -1<CR>
nmap <silent> <A-C-h> :vertical-resize -1<CR>
nmap <silent> <A-C-l> :vertical-resize +1<CR>
nmap <silent> <A-C-k> :resize +1<CR>
nmap <silent> <A-e> :tabnext<CR>
nmap <silent> <A-g> :tabprevious<CR>
