#!/usr/bin/env sh

# progress-notify - Send audio and brightness notifications for dunst

# dependencies: dunstify, ponymix, Papirus (icons)

### How to use: ###
# Pass the values via stdin and provide the notification type
# as an argument. Options are audio, brightness and muted

### Audio notifications ###
#   ponymix increase 5 | notify audio
#   ponymix decrease 5 | notify audio
#   pulsemixer --toggle-mute --get-mute | notify muted
### Brightness notifications ###
#   xbacklight -inc 5  && xbacklight -get | notify brightness
#   xbacklight -dec 5  && xbacklight -get | notify brightness

notifyMuted() {
        volume="$1"
        dunstify -h string:x-canonical-private-synchronous:audio "Muted" -h int:value:"$volume" -t 1500 --icon audio-volume-muted
}

notifyAudio() {
        volume="$1"
        #ponymix is-muted && notifyMuted "$volume" && return

        if [ $volume -eq 0 ]; then
                notifyMuted "$volume"
        elif [ $volume -le 30 ]; then
                dunstify -h string:x-canonical-private-synchronous:audio "Volume: $volume" -h int:value:"$volume" -t 1500 --icon audio-volume-low
        elif [ $volume -le 70 ]; then
                dunstify -h string:x-canonical-private-synchronous:audio "Volume: $volume" -h int:value:"$volume" -t 1500 --icon audio-volume-medium
        else
                dunstify -h string:x-canonical-private-synchronous:audio "Volume: $volume" -h int:value:"$volume" -t 1500 --icon audio-volume-high
        fi
}

notifyBrightness() {
        brightness="$1"
	printf -v brightness %.0f "$brightness"
        if [ $brightness -eq 0 ]; then
                dunstify -h string:x-canonical-private-synchronous:brightness "Brightness: $brightness" -h int:value:"$brightness" -t 1500 --icon display-brightness-off-symbolic
        elif [ $brightness -le 30 ]; then
                dunstify -h string:x-canonical-private-synchronous:brightness "Brightness: $brightness" -h int:value:"$brightness" -t 1500 --icon display-brightness-low-symbolic
        elif [ $brightness -le 70 ]; then
                dunstify -h string:x-canonical-private-synchronous:brightness "Brightness: $brightness" -h int:value:"$brightness" -t 1500 --icon display-brightness-medium-symbolic
        else
                dunstify -h string:x-canonical-private-synchronous:brightness "Brightness: $brightness" -h int:value:"$brightness" -t 1500 --icon display-brightness-high-symbolic
        fi
}

notifyMedia(){
	album_art=$(playerctl metadata --format '{{mpris:artUrl}}')
	album=$(playerctl metadata --format "{{xesam:album}}")
	title=$(playerctl metadata --format "{{xesam:title}}")
	artist=$(playerctl metadata --format "{{xesam:artist}}")
	albumArtist=$(playerctl metadata --format "{{xesam:albumArtist}}")
	player=$(playerctl metadata --format "{{playerName}}")
	status=$(playerctl metadata --format "{{status}}")

	regex='(https?|ftp|file)://[-A-Za-z0-9\+&@#/%?=~_|!:,.;]*[-A-Za-z0-9\+&@#/%=~_|]'
	if [[ $album_art =~ $regex ]]
	then 
		echo "h1"
		albumArtLoc=$album_art
		album_art="/tmp/_ $album _ $title _albumart.jpg"
		if [ ! -f "$album_art" ]; then
			curl "$albumArtLoc" --output "$album_art"
			convert "$album_art" -resize 64x64  "$album_art"
		fi
	fi

	if [ "$1" == 'play-pause' ];then
		pstatus=$status
	else
		if [ "$player" == 'spotify' ];then
      return
    fi
		pstatus=$1
	fi

	dunstify -a "$player" "$pstatus"$'\n'"$title - $album" "<b>$artist  <i>$albumArtist</i></b>" -i "$album_art" -u low -h string:x-canonical-private-synchronous:player_ctl 
}

input=`cat /dev/stdin`

case "$1" in
        muted)
                volume="$2"
                if [ "$input" -eq 0 ]
                then
                        notifyAudio "$volume"
                else
                        notifyMuted "$volume"
                fi
                ;;
        audio)
                notifyAudio "$input"
                ;;
        brightness)
                notifyBrightness "$input"
                ;;
				media)
								notifyMedia "$input"
								;;
        *)
                echo "Not the right arguments"
                echo "$1"
                exit 2
esac
